@using InkaWebSite.Models

<div class="container text-center mt-5 ">
    <div class="bookDateGradient">
        <h3>Book Date</h3>
    </div>

    <hr />
    <div class="col text-center">
        @if (toShowPreviouseDate > 0)
        {
            <a class="calendarmarkers" @onclick="PreviouseMonth">@prevMonth</a>
        }
        <span class="myLogoText"> @calendar.CurrentMonth</span>
        <a class="calendarmarkers" @onclick="NextMonth">@nextMonth</a>
    </div>
    <table class="table table-bordered border-light ">

        <thead>
            <tr>
                <th>@Days.Monday</th>
                <th>@Days.Tuesday</th>
                <th>@Days.Wednesday</th>
                <th>@Days.Thursday</th>
                <th>@Days.Friday</th>
                <th>@Days.Saturday</th>
                <th>@Days.Sunday</th>

            </tr>
        </thead>
        <tbody>
            @if (showPopUp ==true)
            {
                <BookDatePopUp @ref="bookDatePopUp" OnBookDate="OnConfirm" OnCancel="OnCancel" Title="@msg">
                    <div>
                        Are you sure whant to <span class="confirmationResrvation">Reservate</span> @confirmationDate  of @calendar.CurrentMonth ?
                    </div>
                </BookDatePopUp>
            }
            else
            {
                <BookDatePopUp @ref="bookDatePopUp" OnBookDate="OnConfirm" OnCancel="OnCancel" Title="@msg">
                    <div>
                        Are you sure whant to <span class="confirmationCancelation">Cancel</span> reservation on : @confirmationDate  of @calendar.CurrentMonth ?
                    </div>
                </BookDatePopUp>
            }
            @for (int j = MaximumAmountOfWeeksInMonth; j > 0; j--)
            {
                <tr>
                    @for (; nullDaysCounter < startingDayOFMonth; nullDaysCounter++)//NULL days counter pomen9tb na 0 v metode reserve date
                    {
                        <th> @whiteSpace</th>
                    }
                    @if (nullDaysCounter == startingDayOFMonth && tableDevider == 0)
                    {
                        tableDevider = nullDaysCounter;
                    }

                    @while (dayCounter != totalDaysInMonth)
                    {
                        dayCounter++;
                        if (dayCounter == calendar.CurrentDate && toShowPreviouseDate == 0)
                        {
                            @*<th class="currentDate"> @dayCounter</th>*@
                            <th class="currentDate"> @calendarCells.Find(x=>x.CurrentDate ==dayCounter ).CurrentDate</th>
                        }
                        else if (dayCounter < calendar.CurrentDate && toShowPreviouseDate == 0)
                        {
                            @* <th class="bookedDates"> @dayCounter</th>*@
                            <th class="unreachableDates"> @calendarCells.FirstOrDefault(x=>x.CurrentDate ==dayCounter ).CurrentDate</th>
                        }
                        else if (@calendarCells.FirstOrDefault(x => x.CurrentDate == dayCounter).IsBooked)
                        {
                            var localDayCounter = dayCounter;
                            @* <th class="bookedDates"> @dayCounter</th>*@
                            <th class="bookedDates" @onclick="(()=> DateCancellation(localDayCounter))">  @calendarCells.FirstOrDefault(x=>x.CurrentDate ==localDayCounter ).CurrentDate</th>

                        }
                        else
                        {
                            var localDayCounter = dayCounter;
                            @*<th class="freeDates"> @dayCounter</th>*@
                            <th class="freeDates" @onclick="(()=> DateReservation(localDayCounter))">  @calendarCells.FirstOrDefault(x=>x.CurrentDate ==localDayCounter ).CurrentDate</th>
                        }
                        tableDevider++;
                        if (tableDevider % 7 == 0)
                            break;
                    }
                </tr>

            }

        </tbody>
    </table>
</div>


@code {
    Calendar calendar;
    public char prevMonth = '<';
    public char nextMonth = '>';
    public int totalDaysInMonth;
    public int MaximumAmountOfWeeksInMonth;
    public int dayCounter;
    public int startingDayOFMonth;
    public string whiteSpace = " ";
    public int nullDaysCounter;
    public int tableDevider;
    public int toShowPreviouseDate = 0;
    BookDatePopUp bookDatePopUp;
    public string msg = "Confirmation";
    List<TableCell> calendarCells;
    public int confirmationDate;
    private bool showPopUp;
    protected override void OnInitialized()
    {
        showPopUp = true;
        ResetCalendarCounters();
        calendar = new();
        totalDaysInMonth = calendar.CountTotalDayInMonth(calendar.CurrentYear, calendar.Month);
        startingDayOFMonth = Calendar.DayOfFirstDateInTheMonth(calendar.CurrentYear, calendar.Month);
        MaximumAmountOfWeeksInMonth = CountNumbersOfTables();
        calendarCells = FillTableCell(totalDaysInMonth, calendar.Month, calendar.CurrentYear);

    }
    public void PreviouseMonth()
    {

        ResetCalendarCounters();
        calendar.CurrentMonth -= 1;
        calendar.Month -= 1;
        if (calendar.Month == 0)
        {
            calendar.CurrentMonth = Months.December;
            calendar.Month = 12;
            calendar.CurrentYear -= 1;
        }
        totalDaysInMonth = calendar.CountTotalDayInMonth(calendar.CurrentYear, calendar.Month);
        startingDayOFMonth = Calendar.DayOfFirstDateInTheMonth(calendar.CurrentYear, calendar.Month);
        toShowPreviouseDate -= 1;
        MaximumAmountOfWeeksInMonth = CountNumbersOfTables();
        calendarCells = new List<TableCell>();
        calendarCells = FillTableCell(totalDaysInMonth, calendar.Month, calendar.CurrentYear);
        StateHasChanged();
    }
    public void NextMonth()
    {
        ResetCalendarCounters();
        calendar.CurrentMonth += 1;
        calendar.Month += 1;
        if (calendar.Month > 12)
        {
            calendar.CurrentMonth = Months.January;
            calendar.CurrentYear -= 1;
            calendar.Month = 1;
        }
        totalDaysInMonth = calendar.CountTotalDayInMonth(calendar.CurrentYear, calendar.Month);
        startingDayOFMonth = Calendar.DayOfFirstDateInTheMonth(calendar.CurrentYear, calendar.Month);
        toShowPreviouseDate += 1;
        MaximumAmountOfWeeksInMonth = CountNumbersOfTables();
        calendarCells = new List<TableCell>();
        calendarCells = FillTableCell(totalDaysInMonth, calendar.Month, calendar.CurrentYear);
        StateHasChanged();
    }
    private int CountNumbersOfTables()
    {

        if (totalDaysInMonth + startingDayOFMonth > 35)
            return 6;
        else
            return 5;
    }
    private void DateReservation(int date)
    {
        showPopUp = true;
        confirmationDate = date;
           bookDatePopUp.Show();
        ResetCalendarCounters();
     

    }
    private void DateCancellation(int date)
    {
        showPopUp = false;
        confirmationDate = date;
         bookDatePopUp.Show();
        ResetCalendarCounters();
       
    }
    private List<TableCell> FillTableCell(int daysInMonth, int currentMonth, int currentYear)
    {
        List<TableCell> temp = new();
        for (var i = 1; i <= daysInMonth; i++)
        {
            TableCell tempCell = new TableCell
                {
                    CurrentDate = i,
                    IsBooked = false,
                    CurrentMonth = currentMonth,
                    CurrentYear = currentYear,
                    Description = null
                };
            temp.Add(tempCell);
        }

        return temp;
    }
    void OnConfirm()
    {

        TableCell currentCell = calendarCells.Find(x => x.CurrentDate == confirmationDate);

        TableCell updatedCell = new()
            {
                CurrentDate = currentCell.CurrentDate,
                CurrentMonth = currentCell.CurrentMonth,
                CurrentYear = currentCell.CurrentYear,
                Description = currentCell.Description,
                IsBooked = !currentCell.IsBooked
            };
        int index = calendarCells.FindIndex(x => x.CurrentDate.Equals(currentCell.CurrentDate));
        if (index != -1)
            calendarCells[index] = updatedCell;
        ResetCalendarCounters();
        confirmationDate = 0;
        bookDatePopUp.Hide();

        StateHasChanged();


    }
    void OnCancel()
    {
        ResetCalendarCounters();
        bookDatePopUp.Hide();


    }
    void ResetCalendarCounters()
    {

        tableDevider = 0;
        nullDaysCounter = 0;
        dayCounter = 0;
    }
    // нужно начинать отсчет с  текущего дня
}
